{"version":3,"sources":["../../src/utils/apps.js"],"names":["apmAppId","appName","findAppMethodFromData","app","data","methodId","substring","deprecatedFunctions","functions","method","Array","isArray","find","sig","deprecatedFunctionsFromVersions","Object","values","every","allDeprecatedFunctions","concat","knownAppIds"],"mappings":";;;;;;;;AAAA;;AACA;;AAEO,MAAMA,QAAQ,GAAGC,OAAO,IAAI,0BAAU,GAAEA,OAAQ,eAApB,CAA5B;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,SAASC,qBAAT,CAAgCC,GAAhC,EAAqCC,IAArC,EAA2C;AAChD,QAAMC,QAAQ,GAAGD,IAAI,CAACE,SAAL,CAAe,CAAf,EAAkB,EAAlB,CAAjB;AACA,QAAM;AAAEC,IAAAA,mBAAF;AAAuBC,IAAAA;AAAvB,MAAqCL,GAAG,IAAI,EAAlD;AAEA,MAAIM,MAAJ,CAJgD,CAKhD;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcH,SAAd,CAAJ,EAA8B;AAC5BC,IAAAA,MAAM,GAAGD,SAAS,CAACI,IAAV,CACPH,MAAM,IAAI,6BAAaA,MAAM,CAACI,GAApB,EAAyBP,SAAzB,CAAmC,CAAnC,EAAsC,EAAtC,MAA8CD,QADjD,CAAT;AAGD;;AAED,MAAI,CAACI,MAAL,EAAa;AACX;AACA,UAAMK,+BAA+B,GAAGC,MAAM,CAACC,MAAP,CAAcT,mBAAmB,IAAI,EAArC,CAAxC;;AACA,QAAIO,+BAA+B,CAACG,KAAhC,CAAsCP,KAAK,CAACC,OAA5C,CAAJ,EAA0D;AACxD;AACA,YAAMO,sBAAsB,GAAG,GAAGC,MAAH,CAAU,GAAGL,+BAAb,CAA/B;AACAL,MAAAA,MAAM,GAAGS,sBAAsB,CAACN,IAAvB,CACPH,MAAM,IAAI,6BAAaA,MAAM,CAACI,GAApB,EAAyBP,SAAzB,CAAmC,CAAnC,EAAsC,EAAtC,MAA8CD,QADjD,CAAT;AAGD;AACF;;AAED,SAAOI,MAAP;AACD;;AAEM,MAAMW,WAAW,GAAG,CACzBpB,QAAQ,CAAC,SAAD,CADiB,EAEzBA,QAAQ,CAAC,eAAD,CAFiB,EAGzBA,QAAQ,CAAC,OAAD,CAHiB,EAIzBA,QAAQ,CAAC,QAAD,CAJiB,CAApB","sourcesContent":["import { hash as namehash } from 'eth-ens-namehash'\nimport { soliditySha3 } from 'web3-utils'\n\nexport const apmAppId = appName => namehash(`${appName}.aragonpm.eth`)\n\n/**\n * Find the method descriptor corresponding to the data component of a\n * transaction sent to `app`.\n *\n * @param  {Object} app App artifact\n * @param  {Object} data Data component of a transaction to app\n * @return {Object|void} Method with radspec notice and function signature, or undefined if none was found\n */\nexport function findAppMethodFromData (app, data) {\n  const methodId = data.substring(2, 10)\n  const { deprecatedFunctions, functions } = app || {}\n\n  let method\n  // First try to find the method in the current functions\n  if (Array.isArray(functions)) {\n    method = functions.find(\n      method => soliditySha3(method.sig).substring(2, 10) === methodId\n    )\n  }\n\n  if (!method) {\n    // The current functions didn't have it; try with each deprecated version's functions\n    const deprecatedFunctionsFromVersions = Object.values(deprecatedFunctions || {})\n    if (deprecatedFunctionsFromVersions.every(Array.isArray)) {\n      // Flatten all the deprecated functions\n      const allDeprecatedFunctions = [].concat(...deprecatedFunctionsFromVersions)\n      method = allDeprecatedFunctions.find(\n        method => soliditySha3(method.sig).substring(2, 10) === methodId\n      )\n    }\n  }\n\n  return method\n}\n\nexport const knownAppIds = [\n  apmAppId('finance'),\n  apmAppId('token-manager'),\n  apmAppId('vault'),\n  apmAppId('voting')\n]\n"],"file":"apps.js"}